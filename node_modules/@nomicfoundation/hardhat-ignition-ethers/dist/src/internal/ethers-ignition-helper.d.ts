import "@nomicfoundation/hardhat-ethers";
import type { EthersIgnitionHelper, IgnitionModuleResultsTToEthersContracts } from "../types.js";
import type { DeployConfig, DeploymentParameters, EIP1193Provider, IgnitionModule, IgnitionModuleResult, StrategyConfig } from "@nomicfoundation/ignition-core";
import type { ArtifactManager } from "hardhat/types/artifacts";
import type { HardhatConfig } from "hardhat/types/config";
import type { ChainType, NetworkConnection } from "hardhat/types/network";
import "@nomicfoundation/hardhat-ignition";
export declare class EthersIgnitionHelperImpl<ChainTypeT extends ChainType | string> implements EthersIgnitionHelper {
    #private;
    type: "ethers";
    constructor(hardhatConfig: HardhatConfig, artifactsManager: ArtifactManager, connection: NetworkConnection<ChainTypeT>, config?: Partial<DeployConfig> | undefined, provider?: EIP1193Provider);
    /**
     * Deploys the given Ignition module and returns the results of the module as
     * Ethers contract instances.
     *
     * @param ignitionModule - The Ignition module to deploy.
     * @param options - The options to use for the deployment.
     * @returns Ethers contract instances for each contract returned by the
     * module.
     */
    deploy<ModuleIdT extends string, ContractNameT extends string, IgnitionModuleResultsT extends IgnitionModuleResult<ContractNameT>, StrategyT extends keyof StrategyConfig = "basic">(ignitionModule: IgnitionModule<ModuleIdT, ContractNameT, IgnitionModuleResultsT>, { parameters, config: perDeployConfig, defaultSender, strategy, strategyConfig, deploymentId: givenDeploymentId, displayUi, }?: {
        parameters?: DeploymentParameters | string;
        config?: Partial<DeployConfig>;
        defaultSender?: string;
        strategy?: StrategyT;
        strategyConfig?: StrategyConfig[StrategyT];
        deploymentId?: string;
        displayUi?: boolean;
    }): Promise<IgnitionModuleResultsTToEthersContracts<ContractNameT, IgnitionModuleResultsT>>;
}
//# sourceMappingURL=ethers-ignition-helper.d.ts.map